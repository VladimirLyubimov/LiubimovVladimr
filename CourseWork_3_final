#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <wchar.h>
#include <locale.h>
#include <ctype.h>

#define LEN 10

struct MySentence{
    wchar_t* buf;
    int num;
    int third_len;
};

typedef struct MySentence sentence;

struct MyText{
	sentence* buf;
	int size;
	int i;
};

typedef struct MyText mytext;

wchar_t* InputSentence(){
	int size = LEN;
	int i = 0;
	wchar_t* sent = malloc(size * sizeof(wchar_t));
	wchar_t ch;
    
	do{
		ch = fgetwc(stdin);
		sent[i] = ch;
		i++;
		if(i == size - 3){
			size = size + LEN;
			sent = realloc(sent, size * sizeof(wchar_t));
		};
	}while (!wcschr(L"!.", ch));
    sent[i] = '\0';
	
    return sent;
};

mytext InputText(){
	int size = LEN;
	int i = 0;
        sentence* content = malloc(size * sizeof(sentence));
     	while(1){
        content[i].third_len = 0;
        wchar_t *cp = InputSentence();
         if(wcschr(L"!", cp[wcslen(cp) - 1])){
            content[i].buf = cp;
            i = i + 1;
            content[i-1].num = i;
			break;
		}
         else{
			content[i].buf = cp;
			i++;
            content[i-1].num = i;
			if(i == size - 2){
				size = size + LEN;
				content = realloc(content, size * sizeof(sentence));
			};
		};
     };

	struct MyText text;
	text.buf = content;
	text.size = size;
	text.i = i;
	return text;	
};

void PrintSentence(sentence sent){
    wprintf(L"%ls", sent.buf);    
};

void PrintText(mytext text){
    for(int i = 0; i < text.i; i++)
        //wprintf(L"%ls", text.buf[i].buf);
        PrintSentence(text.buf[i]);
};

mytext Shift(mytext text, int start){
    int i = start;
    while (i < (text.i - 1)){
        text.buf[i] = text.buf[i+1];
        text.buf[i].num = text.buf[i].num - 1;
        i = i + 1;
    };
    text.i = text.i - 1;
    
    return text;
}

int SentCompare(sentence samplesent, sentence sent){
    int bol = 0;
    wchar_t* s1;
    wchar_t* s2;
    s1 = malloc((wcslen(samplesent.buf) + 1) * sizeof(wchar_t));
    s2 = malloc((wcslen(sent.buf) + 1) * sizeof(wchar_t));
    wcscpy(s1, samplesent.buf);
    wcscpy(s2, sent.buf);
    
    for(int i = 0; i < wcslen(s1); i++){
        s1[i] = tolower(s1[i]);
    }
    for(int i = 0; i < wcslen(s2); i++){
        s2[i] = tolower(s2[i]);
    }
    
    bol = wcscmp(s1, s2);
    
    free(s1);
    free(s2);
    
    return bol;
};

mytext ExcludeSentence(mytext text){
    int i = 0;
    int j = 1;
    while (i < text.i - 1){
            while(j < text.i){
            if (SentCompare(text.buf[i], text.buf[j]) == 0){
                free(text.buf[j].buf);
                text = Shift(text, j);
                j = j - 1;
            }
            j++;
            }
            i = i + 1;
            j = i + 1;
    }
    return text;
}

void MyFree(mytext text){
    for(int i = 0; i < text.i; i++){
        free(text.buf[i].buf);
    }
    free(text.buf);
};

wchar_t* FindWord(int number, sentence sent){
    wchar_t* word;
    wchar_t* st;
    wchar_t* buf;
    
    st = malloc((wcslen(sent.buf) + 1) * sizeof(wchar_t));
    wcscpy(st, sent.buf);
    
    word = wcstok(st, L"!., ", &buf);
    int i = 1;
    
    while ((i < number)){
        word = wcstok(NULL, L"!., ", &buf);
        i++;
    }
    
    return word;
};

sentence SentShift(sentence sent, int shift, int start){
    int i = start;
    wchar_t* st;
    if (shift >= 0)
        while (i < wcslen(sent.buf)){
            sent.buf[i] = sent.buf[i+shift];
            i = i + 1;
        }
    else{
        st = malloc((wcslen(sent.buf) + 2 - shift) * sizeof(wchar_t));
        wcscpy(st, sent.buf);
        i = wcslen(sent.buf) + 1;
        free(sent.buf);
        while (i >= start){
            st[i-shift] = st[i];
            i = i - 1;
        }
        sent.buf = st;
    }    
    return sent;
};

mytext ShiftWords(mytext text){
    wchar_t* w1;
    wchar_t* w2;
    
    for(int i = 1; i < text.i; i++){
        w1 = FindWord(1, text.buf[i]);
        w2 = FindWord(2, text.buf[i-1]);
        text.buf[i] = SentShift(text.buf[i], wcslen(w1) - wcslen(w2), 1);
        for(int j = 0; j < wcslen(w2); j++)
            text.buf[i].buf[j+1] = w2[j];
    }
    w1 = FindWord(1, text.buf[0]);
    w2 = FindWord(2, text.buf[text.i-1]);
    text.buf[0] = SentShift(text.buf[0], wcslen(w1) - wcslen(w2), 0);
    for(int j = 0; j < wcslen(w2); j++)
        text.buf[0].buf[j] = w2[j];
    
    return text;
};

mytext DeleteSameSymbols(mytext text){
    for(int i = 0; i < text.i; i++){
        for(int j = 0; j < wcslen(text.buf[i].buf); j++){
            if (text.buf[i].buf[j] == text.buf[i].buf[j+1]){
                text.buf[i] = SentShift(text.buf[i], 1, j);
                j = j - 1;
            }
        }
    }
    return text;
};

int FindThirdWordLen(sentence sent){
    int len;
    wchar_t* word;
    word = FindWord(3, sent);
    if(word == NULL)
        len = 0;
    else
        len = wcslen(word);
    return len;
};

int* MakeThirdLenTable(mytext text){
    int* lenarr;
    lenarr = malloc(text.i * sizeof(int));
    for(int i = 0; i < text.i; i++){
        lenarr[i] = FindThirdWordLen(text.buf[i]);
        text.buf[i].third_len = lenarr[i];
    }
    return lenarr;
};

int compare(const void * val1, const void * val2){
    return ( *(int*)val1 - *(int*)val2 );
};

int* SortThirdLen(int* lenarr, mytext text){
    qsort(lenarr, text.i, sizeof(int), compare);    
    return lenarr;
};

mytext SortText(mytext text){
    int* arr;
    int shift = 0;
    sentence sent[text.i];
    arr = MakeThirdLenTable(text);
    arr = SortThirdLen(arr, text);
    for(int i = 0; i < text.i; i++){
        for(int j = 0; j < text.i; j++){
            if(text.buf[i].third_len == arr[j]){
                arr[j] = -1;
                sent[j] = text.buf[i];
                break;
            }
        }    
    }
    for(int i = 0; i < text.i; i++)
        text.buf[i] = sent[i];
    return text;
};

int CheckWord(wchar_t* word){
    int bol = 0;
    if (!wcschr(L"0123456789", word[0]) && !wcschr(L"0123456789", word[wcslen(word)-1]) && wcspbrk(word, L"0123456789")){
        bol = 1;
    }
    return bol;
};

int* FindNumInWord(mytext text){
    wchar_t* word;
    int* arr;
    arr = calloc(text.i + 1, sizeof(int));
    int k = 0;
    int j = 0;
    for(int i = 0; i < text.i; i++){
        word = FindWord(k, text.buf[i]);        
        while(word != NULL){
            if (CheckWord(word) == 1){
                arr[j+1] = i;
                j = j + 1;
                break;
                //PrintSentence(text.buf[i]);
                //wprintf(L"\n");
            }
            k = k + 1; 
            word = FindWord(k, text.buf[i]);
        }
        k = 0;
    }
    arr[0] = j;
    
    return arr;
};

void PrintNumWords(mytext text, int* arr){
    wchar_t* buf;
    wchar_t* word;
    wchar_t* sent;
    for(int i = 1; i <= arr[0]; i++){
        sent = malloc((wcslen(text.buf[arr[i]].buf) + 1) * sizeof(wchar_t));
        wcscpy(sent, text.buf[arr[i]].buf);
        word = wcstok(sent, L"!. ", &buf);        
        while(word != NULL){
            if (CheckWord(word) == 1){
                wprintf(L"%ls ", word, "\x1B[32m");
                //PrintSentence(text.buf[i]);
                //wprintf(L"\n");
            }
            else
                wprintf(L"%ls ", word);
            word = wcstok(NULL, L" ", &buf);
        } 
        free(sent);
    }
};


int main(){
    setlocale(LC_ALL,"");
    
    mytext ttext;
    wchar_t* word;
    sentence sent;
    int* a;
    
    ttext = InputText();
    
    wprintf(L"%d\n", ttext.size);
    wprintf(L"%d\n", ttext.i);
    
    ttext = ExcludeSentence(ttext);
    //wprintf(L"%d\n", SortThirdLen(MakeThirdLenTable(ttext), ttext)[4]);
    //wprintf(L"%lc", ttext.buf[1].buf[1]);
    //PrintText(ttext);
    //sent = SentShift(ttext.buf[0], -11, 0);
    //ttext = ShiftWords(ttext);
    //ttext = DeleteSameSymbols(ttext);
    PrintText(ttext);
    wprintf(L"\n");
    a = FindNumInWord(ttext);
    PrintNumWords(ttext, a);
    //wprintf(L"%d\n", a[5]);
    //ttext = SortText(ttext);
    //PrintText(ttext);
    MyFree(ttext);
    
    return 0;
};
